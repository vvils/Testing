name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  DOCKER_IMAGE: wilsonw321/simple-app
  KUBE_NAMESPACE: production
  STAGING_NAMESPACE: staging

jobs:
  build-and-deploy-staging:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./k8s/Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:staging-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Setup kubectl config for self-hosted runner
        run: |
          echo "=== Setting up kubectl for self-hosted runner ==="
          echo "User: $(whoami), Home: $HOME, PWD: $(pwd)"
          
          # Create .kube directory
          mkdir -p $HOME/.kube
          
          # Method 1: Try to use base64 encoded config from .env
          if [ -f "/home/wilson/Projects/tst/.env" ] && grep -q "KUBE_CONFIG=" /home/wilson/Projects/tst/.env; then
            echo "Using base64 encoded kubectl config from .env file"
            KUBE_CONFIG_B64=$(grep "KUBE_CONFIG=" /home/wilson/Projects/tst/.env | cut -d '=' -f2)
            echo "$KUBE_CONFIG_B64" | base64 -d > $HOME/.kube/config
            chmod 600 $HOME/.kube/config
            echo "kubectl config decoded and saved successfully"
          # Method 2: Fallback to copying from host user
          elif [ -f "/home/wilson/.kube/config" ]; then
            echo "Using kubectl config from host user"
            cp /home/wilson/.kube/config $HOME/.kube/config
            chmod 600 $HOME/.kube/config
            echo "kubectl config copied successfully"
          else
            echo "ERROR: kubectl config not found in .env or at /home/wilson/.kube/config"
            echo "Please ensure Docker Desktop Kubernetes is running and config is available"
            exit 1
          fi
          
          # Set KUBECONFIG environment variable
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          
          # Verify kubectl access
          kubectl cluster-info

      - name: Deploy to staging
        run: |
          echo "Deploying to staging namespace..."
          kubectl get namespace ${{ env.STAGING_NAMESPACE }} || kubectl create namespace ${{ env.STAGING_NAMESPACE }}
          sed "s/<COMMIT_HASH>/${{ github.sha }}/g" k8s/kubernetes-staging.yaml | kubectl apply -f -
          kubectl rollout status deployment/simple-app-staging -n ${{ env.STAGING_NAMESPACE }} --timeout=300s
          echo "Staging deployment completed!"
          echo "Access via: kubectl port-forward service/simple-app-staging-service 3001:80 -n staging"

  build-and-deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./k8s/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Setup kubectl config for self-hosted runner
        run: |
          echo "=== Setting up kubectl for self-hosted runner ==="
          echo "User: $(whoami), Home: $HOME, PWD: $(pwd)"
          
          # Create .kube directory
          mkdir -p $HOME/.kube
          
          # Method 1: Try to use base64 encoded config from .env
          if [ -f "/home/wilson/Projects/tst/.env" ] && grep -q "KUBE_CONFIG=" /home/wilson/Projects/tst/.env; then
            echo "Using base64 encoded kubectl config from .env file"
            KUBE_CONFIG_B64=$(grep "KUBE_CONFIG=" /home/wilson/Projects/tst/.env | cut -d '=' -f2)
            echo "$KUBE_CONFIG_B64" | base64 -d > $HOME/.kube/config
            chmod 600 $HOME/.kube/config
            echo "kubectl config decoded and saved successfully"
          # Method 2: Fallback to copying from host user
          elif [ -f "/home/wilson/.kube/config" ]; then
            echo "Using kubectl config from host user"
            cp /home/wilson/.kube/config $HOME/.kube/config
            chmod 600 $HOME/.kube/config
            echo "kubectl config copied successfully"
          else
            echo "ERROR: kubectl config not found in .env or at /home/wilson/.kube/config"
            echo "Please ensure Docker Desktop Kubernetes is running and config is available"
            exit 1
          fi
          
          # Set KUBECONFIG environment variable
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          
          # Verify kubectl access
          kubectl cluster-info

      - name: Deploy to production
        run: |
          echo "Deploying to production namespace..."
          kubectl get namespace ${{ env.KUBE_NAMESPACE }} || kubectl create namespace ${{ env.KUBE_NAMESPACE }}
          sed "s/<COMMIT_HASH>/${{ github.sha }}/g" k8s/kubernetes.yaml | kubectl apply -f -
          kubectl rollout status deployment/simple-app -n ${{ env.KUBE_NAMESPACE }} --timeout=300s

      - name: Get deployment status
        run: |
          echo "=== Production Deployment Status ==="
          kubectl get deployments -n ${{ env.KUBE_NAMESPACE }}
          echo ""
          echo "=== Production Pod Status ==="
          kubectl get pods -l app=simple-app -n ${{ env.KUBE_NAMESPACE }}

      - name: Production health check
        run: |
          SERVICE_IP=$(kubectl get service simple-app-service -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.spec.clusterIP}')
          echo "Service IP: $SERVICE_IP"
          echo "Production deployment completed successfully!"
          echo "Access via: kubectl port-forward service/simple-app-service 3002:80 -n production"
