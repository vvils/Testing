name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  DOCKER_IMAGE: wilsonw321/simple-app
  KUBE_NAMESPACE: production
  STAGING_NAMESPACE: staging

jobs:
  build-and-deploy-staging:
    runs-on: self-hosted
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker and Kubernetes
        uses: ./.github/actions/setup-docker-k8s
        with:
          dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
          kube_config: ${{ secrets.KUBE_CONFIG }}

      - name: Build and push staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./k8s/Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:staging-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging
        run: |
          echo "Deploying to staging namespace..."
          kubectl get namespace ${{ env.STAGING_NAMESPACE }} || kubectl create namespace ${{ env.STAGING_NAMESPACE }}
          sed "s/<COMMIT_HASH>/${{ github.sha }}/g" k8s/kubernetes-staging.yaml | kubectl apply -f -
          kubectl rollout status deployment/simple-app-staging -n ${{ env.STAGING_NAMESPACE }} --timeout=300s

      - name: Get deployment status
        run: |
          echo "=== Staging Deployment Status ==="
          kubectl get deployments -n ${{ env.STAGING_NAMESPACE }}
          kubectl get pods -l app=simple-app-staging -n ${{ env.STAGING_NAMESPACE }}

      - name: Staging health check
        run: |
          SERVICE_IP=$(kubectl get service simple-app-staging-service -n ${{ env.STAGING_NAMESPACE }} -o jsonpath='{.spec.clusterIP}' || echo "N/A")
          echo "Service IP: $SERVICE_IP"
          echo "Staging deployment completed successfully!"
          echo ""
          echo "ðŸš€ To access staging locally:"
          echo "  Method 1: Use the helper script"
          echo "    ./scripts/port-forward.sh staging"
          echo ""
          echo "  Method 2: Manual port forwarding"
          echo "    kubectl port-forward service/simple-app-staging-service 3001:80 -n staging"
          echo ""
          echo "  Then visit: http://localhost:3001"

  build-and-deploy-production:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker and Kubernetes
        uses: ./.github/actions/setup-docker-k8s
        with:
          dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
          kube_config: ${{ secrets.KUBE_CONFIG }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./k8s/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production
        run: |
          echo "Deploying to production namespace..."
          kubectl get namespace ${{ env.KUBE_NAMESPACE }} || kubectl create namespace ${{ env.KUBE_NAMESPACE }}
          sed "s/<COMMIT_HASH>/${{ github.sha }}/g" k8s/kubernetes.yaml | kubectl apply -f -
          kubectl rollout status deployment/simple-app -n ${{ env.KUBE_NAMESPACE }} --timeout=300s

      - name: Get deployment status
        run: |
          echo "=== Production Deployment Status ==="
          kubectl get deployments -n ${{ env.KUBE_NAMESPACE }}
          kubectl get pods -l app=simple-app -n ${{ env.KUBE_NAMESPACE }}

      - name: Production health check
        run: |
          SERVICE_IP=$(kubectl get service simple-app-service -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.spec.clusterIP}' || echo "N/A")
          echo "Service IP: $SERVICE_IP"
          echo "Production deployment completed successfully!"
          echo ""
          echo "ðŸš€ To access production locally:"
          echo "  Method 1: Use the helper script"
          echo "    ./scripts/port-forward.sh production"
          echo ""
          echo "  Method 2: Manual port forwarding"
          echo "    kubectl port-forward service/simple-app-service 3002:80 -n production"
          echo ""
          echo "  Then visit: http://localhost:3002" 