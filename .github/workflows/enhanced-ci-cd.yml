name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  DOCKER_IMAGE: wilsonw321/simple-app
  KUBE_NAMESPACE: default
  STAGING_NAMESPACE: staging

jobs:
  test:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tests
        run: |
          echo "Running tests..."
          # Add your test commands here
          # npm test
          # pytest
          # etc.

  build-and-deploy-staging:
    runs-on: self-hosted
    needs: test
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:staging-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging
        run: |
          # Create staging namespace if it doesn't exist
          kubectl create namespace ${{ env.STAGING_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply staging configuration
          kubectl apply -f kubernetes-staging.yaml
          
          # Update staging deployment with new image
          kubectl set image deployment/simple-app-staging simple-app=${{ env.DOCKER_IMAGE }}:staging-${{ github.sha }} -n ${{ env.STAGING_NAMESPACE }}
          
          # Wait for rollout
          kubectl rollout status deployment/simple-app-staging -n ${{ env.STAGING_NAMESPACE }} --timeout=300s

      - name: Staging health check
        run: |
          echo "Staging deployment completed!"
          echo "Staging URL: http://staging.yourdomain.com"

  build-and-deploy-production:
    runs-on: self-hosted
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production
        run: |
          # Apply production configuration
          kubectl apply -f kubernetes.yaml
          
          # Update production deployment
          kubectl set image deployment/simple-app simple-app=${{ env.DOCKER_IMAGE }}:${{ github.sha }} -n ${{ env.KUBE_NAMESPACE }}
          
          # Wait for rollout
          kubectl rollout status deployment/simple-app -n ${{ env.KUBE_NAMESPACE }} --timeout=300s

      - name: Production health check
        run: |
          echo "Production deployment completed!"
          echo "Production URL: http://yourdomain.com"

      - name: Get deployment status
        run: |
          echo "=== Production Deployment Status ==="
          kubectl get deployments -n ${{ env.KUBE_NAMESPACE }}
          echo ""
          echo "=== Production Pod Status ==="
          kubectl get pods -l app=simple-app -n ${{ env.KUBE_NAMESPACE }} 